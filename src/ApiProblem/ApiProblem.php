<?php

namespace MNC\Bundle\RestBundle\ApiProblem;

use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Response;

/**
 * This class in an implementation of RFC-7807, modeling an ApiProblem.
 * @docs https://www.rfc-editor.org/rfc/rfc7807.txt
 * @package MNC\Bundle\RestBundle\ApiProblem
 * @author MatÃ­as Navarro Carter <mnavarro@option.cl>
 */
class ApiProblem implements ApiProblemInterface
{
    const CONTENT_TYPE = 'application/problem+json';

    private static $titles = [
        ApiError::TYPE_VALIDATION_ERROR => 'There was a validation error',
        ApiError::TYPE_AUTHORIZATION_ERROR => 'There was an authorization error',
        ApiError::TYPE_INVALID_REQUEST_BODY_FORMAT => 'Invalid request body format',
        ApiError::TYPE_DATABASE_ERROR => 'There was a database error'
    ];

    /**
     * @var string
     * A URI reference [RFC3986] that identifies the problem type.
     * This specification encourages that, when dereferenced, it provide
     * human-readable documentation for the problem type (e.g., using HTML
     * [W3C.REC-html5-20141028]).  When this member is not present, its value
     * is assumed to be "about:blank".
     */
    private $type;
    /**
     * @var mixed
     * A short, human-readable summary of the problem type.  It SHOULD NOT
     * change from occurrence to occurrence of the problem, except for purposes
     * of localization (e.g., using proactive content negotiation; see
     * [RFC7231], Section 3.4).
     */
    private $title;
    /**
     * @var string
     * The HTTP status code ([RFC7231], Section 6) generated by the origin
     * server for this occurrence of the problem.
     */
    private $status;
    /**
     * @var string
     * A human-readable explanation specific to this occurrence of the problem.
     */
    private $detail;
    /**
     * @var string
     * A URI reference that identifies the specific occurrence of the problem.
     * It may or may not yield further information if dereferenced.
     */
    private $instance;
    /**
     * @var array
     * Some other extra keys for holding error data.
     */
    private $extra = [];

    /**
     * ApiProblem constructor.
     * @param        $status
     * @param string $type
     * @param null   $detail
     * @param null   $instance
     */
    public function __construct($status, $detail = null, $type = 'about:blank', $instance = null)
    {
        $this->status = $status;
        $this->type = $type;
        if ($type !== 'about:blank') {
            if (!isset(self::$titles[$type])) {
                throw new \InvalidArgumentException("No title for type $type");
            }
            $this->title = self::$titles[$type];
        } else {
            $this->title = Response::$statusTexts[$status];
        }
        $this->detail = $detail;
    }

    /**
     * ApiProblem Factory Method
     * @param        $status
     * @param string $type
     * @param null   $detail
     * @param null   $instance
     * @return ApiProblem
     */
    public static function create($status, $detail = null, $type = 'about:blank', $instance = null)
    {
        return new self($status, $detail, $type, $instance);
    }

    /**
     * @return array
     */
    public function toArray()
    {
        $data = [];
        $this->type === null ?: $data['type'] = $this->type;
        $this->title === null ?: $data['title'] = $this->title;
        $this->status === null ?: $data['status'] = $this->status;
        $this->detail === null ?: $data['detail'] = $this->detail;
        $this->instance === null ?: $data['instance'] = $this->instance;
        return array_merge($data, $this->extra);
    }

    /**
     * Throws a ApiProblemException.
     * @throws ApiProblemException
     */
    public function throwException()
    {
        throw $this->toException();
    }

    /**
     * Returns an instance of ApiProblemException.
     * @return ApiProblemException
     */
    public function toException()
    {
        return ApiProblemException::createFromApiProblem($this);
    }

    /**
     * @return JsonResponse
     */
    public function toJsonResponse()
    {
        return JsonResponse::create($this->toArray(), $this->status, ['Content-Type' => self::CONTENT_TYPE]);
    }

    /**
     * @return integer
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * @return string
     */
    public function getDetail()
    {
        return $this->detail;
    }

    /**
     * @return string
     */
    public function getInstance()
    {
        return $this->instance;
    }

    /**
     * @param $detail
     * @return $this
     */
    public function setDetail($detail)
    {
        $this->detail = $detail;
        return $this;
    }

    /**
     * @param $instance
     * @return $this
     */
    public function setInstance($instance)
    {
        $this->instance = $instance;
        return $this;
    }

    /**
     * @param $key
     * @param $value
     * @return ApiProblem
     */
    public function set($key, $value)
    {
        $this->extra[$key] = $value;
        return $this;
    }
}